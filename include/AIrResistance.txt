#include <iostream>
#include <fstream>
#include <iomanip>
#include <vector>
#include <cstdlib>
#include "AirResistance.h"

glm::vec3 computeNetForce(AirResistance airResistance, glm::vec3 velocity, float height, float angle, float massProjectile, float densityProjectile);

/** * @brief Main function for simulating the trajectory of a projectile in air
 *
 * Simulates a projectile's trajectory in the presence of air resistance, taking
 * into account its mass, velocity, and position. Also calculates the energy and
 * momentum of the projectile over time.
 *
 * @author [Raul Ena]
 * @version 1.0
 * @date [2025-04-01]
 **/
int main() 
{
    std::cout << "Tank Impact Simulation Starting...\n";
    AirResistance airResistance(0.3f, 0.01f);

    // Initial Conditions
    float initialHeight = 20000.0f; // meters
    glm::vec3 initialVelocity = glm::vec3(0.0f, 0.0f, 0.0f); // (x, y, z) m/s
    glm::vec3 initialPosition = glm::vec3(0.0f, 0.0f, initialHeight); // (x, y, z) m
    float gAcceleration = airResistance.g0; // Gravity (m/s²)
    float massProjectile = 500.0f;  // kg
    float densityProjectile = 17000.f; // armor-piercing projectile density (kg/m³)
    float initialTime = 0.0f; // Start time (s)
    float timeStep = 0.01f; // Time step (s)
    float finalTime = 100.f; // Max simulation time (s)
    float angle = 0.0f; // Initial angle (degrees)

    // Initialize Variables
    glm::vec3 velocity = initialVelocity;  
    glm::vec3 position = initialPosition;
    float time = initialTime;
    float machNumber = airResistance.calculateMachNumber(velocity, position.z);
    float terminalVelocity = airResistance.calculateTerminalVelocity(massProjectile, position.z);

    // Energy & Momentum
    float kineticEnergy = 0.5f * massProjectile * static_cast<float>(glm::length(velocity) * glm::length(velocity));
    float potentialEnergy = massProjectile * gAcceleration * position.z;
    float totalEnergy = kineticEnergy + potentialEnergy;
    float totalMomentum = massProjectile * static_cast<float>(glm::length(velocity));

    // Open Output File
    std::ofstream outputFile("ProjectileTrajectory.txt");
    outputFile << "t\tposX\tposY\tposZ\tvX\tvY\tvZ\tM_n\tT_v\tK_e\tP_e\tT_e\tT_m\tA_h\n";
    outputFile << std::fixed << std::setprecision(4);

    // // Initial Output
    // std::cout << "Simulation started at t = " << time << " s, altitude = " << position.z << " m\n";
    // outputFile << time << "\t" << position.x << "\t" << position.y << "\t" << position.z << "\t"
    //            << velocity.x << "\t" << velocity.y << "\t" << velocity.z << "\t" 
    //            << machNumber << "\t" << terminalVelocity << "\t" 
    //            << kineticEnergy << "\t" << potentialEnergy << "\t" << totalEnergy << "\t" 
    //            << totalMomentum << "\n";

    // Simulation Loop
    while (time < finalTime)
    {
        // Compute RK4 Steps for Velocity (Acceleration) & Position
        glm::vec3 k1v = timeStep * computeNetForce(airResistance, velocity, position.z, angle, massProjectile, densityProjectile);
        glm::vec3 k1p = timeStep * velocity;

        glm::vec3 k2v = timeStep * computeNetForce(airResistance, velocity + timeStep * .5f * k1v, position.z + timeStep * 0.5f * k1p.z, angle, massProjectile, densityProjectile);
        glm::vec3 k2p = timeStep * (velocity + timeStep * 0.5f * k1v);

        glm::vec3 k3v = timeStep * computeNetForce(airResistance, velocity + timeStep * 0.5f * k2v, position.z + timeStep * .5f * k2p.z, angle, massProjectile, densityProjectile);
        glm::vec3 k3p = timeStep * (velocity + timeStep * 0.5f * k2v);

        glm::vec3 k4v = timeStep * computeNetForce(airResistance, velocity + timeStep * k3v, position.z + timeStep * k3p.z, angle, massProjectile, densityProjectile);
        glm::vec3 k4p = timeStep * (velocity + timeStep * k3v);

        // RK4 Integration for Velocity
        velocity += (k1v + 2.0f * k2v + 2.0f * k3v + k4v) / 6.0f;
        position += (k1p + 2.0f * k2p + 2.0f * k3p + k4p) / 6.0f;

        // Calculate Mach Number & Terminal Velocity
        machNumber = airResistance.calculateMachNumber(velocity, position.z);
        terminalVelocity = airResistance.calculateTerminalVelocity(massProjectile, position.z);

        // Energy & Momentum Calculations
        kineticEnergy = 0.5f * massProjectile * static_cast<float>(glm::length(velocity) * glm::length(velocity));
        potentialEnergy = massProjectile * gAcceleration * position.z;
        totalEnergy = kineticEnergy + potentialEnergy;
        totalMomentum = massProjectile * static_cast<float>(glm::length(velocity));
        // std::cout << "Time: " << time << " s, Altitude: " << position.z << " m, Velocity: " << velocity.length() <<"m/s, Mach Number: " << machNumber << 
        // ", Terminal Velocity: " << terminalVelocity << " m/s, Total Energy: " << totalEnergy << " J" <<std::endl;

        // Calculate Aerodynamic Heating
        float aerodynamicHeating = airResistance.aerodynamicHeating(velocity, position.z, angle);

        // Output Data
        outputFile << time << "\t" << position.x << "\t" << position.y << "\t" << position.z << "\t"
                   << velocity.x << "\t" << velocity.y << "\t" << velocity.z << "\t" 
                   << machNumber << "\t" << terminalVelocity << "\t" 
                   << kineticEnergy << "\t" << potentialEnergy << "\t" << totalEnergy << "\t" 
                   << totalMomentum << "\t" << aerodynamicHeating << "\n";

        // Break if Projectile Hits Ground
        if (position.z <= 0.0f)
        {
            std::cout << "Projectile impact at t = " << time << " s, velocity = " 
                      << glm::length(velocity) << " m/s\n";
            break;
        }

        // Update Time
        time += timeStep;
    }

    outputFile.close();
    system("pause"); // Keeps the terminal open
    return 0;
}


/**
 * @brief Computes the net force (drag + gravity) on a projectile
 *
 * @param airResistance the AirResistance object containing parameters
 * @param velocity the current velocity of the projectile
 * @param height the current height of the projectile
 * @param angle the angle of attack of the projectile
 * @param massProjectile the mass of the projectile
 * @return the net force divided by the mass of the projectile (acceleration)
 */
glm::vec3 computeNetForce(AirResistance airResistance, glm::vec3 velocity, float height, float angle, float massProjectile, float densityProjectile)
{
    glm::vec3 dragForce = airResistance.computeTotalDrag(velocity, height, angle, airResistance.calculateTemperature(height));
    glm::vec3 gravityForce = airResistance.gravitationalForce(height);
    glm::vec3 liftForce = airResistance.calculateLiftForce(velocity, height, angle, massProjectile);
    glm::vec3 coriolisForce = airResistance.calculateCoriolisForce(velocity, massProjectile);
    float volumeProjectile = massProjectile / densityProjectile; // Assuming volume = mass / density
    glm::vec3 buoyancyForce = airResistance.calculateBouyancyForce(height, volumeProjectile);
    glm::vec3 netForce = dragForce + gravityForce + buoyancyForce + coriolisForce + liftForce;
    
    return netForce / massProjectile;
}